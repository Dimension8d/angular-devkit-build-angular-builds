"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const normalize_asset_patterns_1 = require("./normalize-asset-patterns");
const normalize_file_replacements_1 = require("./normalize-file-replacements");
const normalize_optimization_1 = require("./normalize-optimization");
const normalize_source_maps_1 = require("./normalize-source-maps");
function normalizeBrowserSchema(host, root, projectRoot, sourceRoot, options) {
    const syncHost = new core_1.virtualFs.SyncDelegateHost(host);
    const normalizedSourceMapOptions = normalize_source_maps_1.normalizeSourceMaps(options.sourceMap || false);
    normalizedSourceMapOptions.vendor = normalizedSourceMapOptions.vendor || options.vendorSourceMap;
    return Object.assign({}, options, { assets: normalize_asset_patterns_1.normalizeAssetPatterns(options.assets || [], syncHost, root, projectRoot, sourceRoot), fileReplacements: normalize_file_replacements_1.normalizeFileReplacements(options.fileReplacements || [], syncHost, root), optimization: normalize_optimization_1.normalizeOptimization(options.optimization), sourceMap: normalizedSourceMapOptions, statsJson: options.statsJson || false, forkTypeChecker: options.forkTypeChecker || false, budgets: options.budgets || [], scripts: options.scripts || [], styles: options.styles || [], stylePreprocessorOptions: {
            includePaths: options.stylePreprocessorOptions
                && options.stylePreprocessorOptions.includePaths
                || [],
        }, lazyModules: options.lazyModules || [] });
}
exports.normalizeBrowserSchema = normalizeBrowserSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy91dGlscy9ub3JtYWxpemUtYnVpbGRlci1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7R0FNRzs7QUFHSCwrQ0FBdUQ7QUFRdkQseUVBQW9FO0FBQ3BFLCtFQUd1QztBQUN2QyxxRUFBaUU7QUFDakUsbUVBQThEO0FBYTlELFNBQWdCLHNCQUFzQixDQUNwQyxJQUF3QixFQUN4QixJQUFVLEVBQ1YsV0FBaUIsRUFDakIsVUFBNEIsRUFDNUIsT0FBNkI7SUFFN0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXRELE1BQU0sMEJBQTBCLEdBQUcsMkNBQW1CLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUNuRiwwQkFBMEIsQ0FBQyxNQUFNLEdBQUcsMEJBQTBCLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFFakcseUJBQ0ssT0FBTyxJQUNWLE1BQU0sRUFBRSxpREFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsRUFDN0YsZ0JBQWdCLEVBQUUsdURBQXlCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQzNGLFlBQVksRUFBRSw4Q0FBcUIsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQ3pELFNBQVMsRUFBRSwwQkFBMEIsRUFFckMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTLElBQUksS0FBSyxFQUNyQyxlQUFlLEVBQUUsT0FBTyxDQUFDLGVBQWUsSUFBSSxLQUFLLEVBQ2pELE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFDOUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxFQUM5QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQzVCLHdCQUF3QixFQUFFO1lBQ3hCLFlBQVksRUFBRSxPQUFPLENBQUMsd0JBQXdCO21CQUN6QyxPQUFPLENBQUMsd0JBQXdCLENBQUMsWUFBWTttQkFDN0MsRUFBRTtTQUNSLEVBQ0QsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxJQUN0QztBQUNKLENBQUM7QUEvQkQsd0RBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuaW1wb3J0IHsgUGF0aCwgdmlydHVhbEZzIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgQnVpbGRPcHRpb25zIH0gZnJvbSAnLi4vYW5ndWxhci1jbGktZmlsZXMvbW9kZWxzL2J1aWxkLW9wdGlvbnMnO1xuaW1wb3J0IHtcbiAgQXNzZXRQYXR0ZXJuQ2xhc3MsXG4gIE9wdGltaXphdGlvbkNsYXNzLFxuICBTY2hlbWEgYXMgQnJvd3NlckJ1aWxkZXJTY2hlbWEsXG4gIFNvdXJjZU1hcENsYXNzLFxufSBmcm9tICcuLi9icm93c2VyL3NjaGVtYSc7XG5pbXBvcnQgeyBub3JtYWxpemVBc3NldFBhdHRlcm5zIH0gZnJvbSAnLi9ub3JtYWxpemUtYXNzZXQtcGF0dGVybnMnO1xuaW1wb3J0IHtcbiAgTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudCxcbiAgbm9ybWFsaXplRmlsZVJlcGxhY2VtZW50cyxcbn0gZnJvbSAnLi9ub3JtYWxpemUtZmlsZS1yZXBsYWNlbWVudHMnO1xuaW1wb3J0IHsgbm9ybWFsaXplT3B0aW1pemF0aW9uIH0gZnJvbSAnLi9ub3JtYWxpemUtb3B0aW1pemF0aW9uJztcbmltcG9ydCB7IG5vcm1hbGl6ZVNvdXJjZU1hcHMgfSBmcm9tICcuL25vcm1hbGl6ZS1zb3VyY2UtbWFwcyc7XG5cblxuLyoqXG4gKiBBIG5vcm1hbGl6ZWQgYnJvd3NlciBidWlsZGVyIHNjaGVtYS5cbiAqL1xuZXhwb3J0IHR5cGUgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hID0gQnJvd3NlckJ1aWxkZXJTY2hlbWEgJiBCdWlsZE9wdGlvbnMgJiB7XG4gIHNvdXJjZU1hcDogU291cmNlTWFwQ2xhc3M7XG4gIGFzc2V0czogQXNzZXRQYXR0ZXJuQ2xhc3NbXTtcbiAgZmlsZVJlcGxhY2VtZW50czogTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudFtdO1xuICBvcHRpbWl6YXRpb246IE9wdGltaXphdGlvbkNsYXNzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUJyb3dzZXJTY2hlbWEoXG4gIGhvc3Q6IHZpcnR1YWxGcy5Ib3N0PHt9PixcbiAgcm9vdDogUGF0aCxcbiAgcHJvamVjdFJvb3Q6IFBhdGgsXG4gIHNvdXJjZVJvb3Q6IFBhdGggfCB1bmRlZmluZWQsXG4gIG9wdGlvbnM6IEJyb3dzZXJCdWlsZGVyU2NoZW1hLFxuKTogTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIHtcbiAgY29uc3Qgc3luY0hvc3QgPSBuZXcgdmlydHVhbEZzLlN5bmNEZWxlZ2F0ZUhvc3QoaG9zdCk7XG5cbiAgY29uc3Qgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMgPSBub3JtYWxpemVTb3VyY2VNYXBzKG9wdGlvbnMuc291cmNlTWFwIHx8IGZhbHNlKTtcbiAgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMudmVuZG9yID0gbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMudmVuZG9yIHx8IG9wdGlvbnMudmVuZG9yU291cmNlTWFwO1xuXG4gIHJldHVybiB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBhc3NldHM6IG5vcm1hbGl6ZUFzc2V0UGF0dGVybnMob3B0aW9ucy5hc3NldHMgfHwgW10sIHN5bmNIb3N0LCByb290LCBwcm9qZWN0Um9vdCwgc291cmNlUm9vdCksXG4gICAgZmlsZVJlcGxhY2VtZW50czogbm9ybWFsaXplRmlsZVJlcGxhY2VtZW50cyhvcHRpb25zLmZpbGVSZXBsYWNlbWVudHMgfHwgW10sIHN5bmNIb3N0LCByb290KSxcbiAgICBvcHRpbWl6YXRpb246IG5vcm1hbGl6ZU9wdGltaXphdGlvbihvcHRpb25zLm9wdGltaXphdGlvbiksXG4gICAgc291cmNlTWFwOiBub3JtYWxpemVkU291cmNlTWFwT3B0aW9ucyxcblxuICAgIHN0YXRzSnNvbjogb3B0aW9ucy5zdGF0c0pzb24gfHwgZmFsc2UsXG4gICAgZm9ya1R5cGVDaGVja2VyOiBvcHRpb25zLmZvcmtUeXBlQ2hlY2tlciB8fCBmYWxzZSxcbiAgICBidWRnZXRzOiBvcHRpb25zLmJ1ZGdldHMgfHwgW10sXG4gICAgc2NyaXB0czogb3B0aW9ucy5zY3JpcHRzIHx8IFtdLFxuICAgIHN0eWxlczogb3B0aW9ucy5zdHlsZXMgfHwgW10sXG4gICAgc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zOiB7XG4gICAgICBpbmNsdWRlUGF0aHM6IG9wdGlvbnMuc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zXG4gICAgICAgICYmIG9wdGlvbnMuc3R5bGVQcmVwcm9jZXNzb3JPcHRpb25zLmluY2x1ZGVQYXRoc1xuICAgICAgICB8fCBbXSxcbiAgICB9LFxuICAgIGxhenlNb2R1bGVzOiBvcHRpb25zLmxhenlNb2R1bGVzIHx8IFtdLFxuICB9O1xufVxuIl19